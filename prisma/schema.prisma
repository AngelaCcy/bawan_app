generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Product {
  id          Int          @id @default(autoincrement())
  brand       String
  title       String
  description String
  rating      Int
  stock       Int
  category    String
  image       String[]
  availableFrom   DateTime?
  availableUntil  DateTime?
  priceItems  PriceItem[] // A product can have miltiple sizes
}

// Each size with corresponding price
model PriceItem {
  id         Int         @id @default(autoincrement())
  size       String
  price      Int
  product    Product     @relation(fields: [productId], references: [id])
  productId  Int
  salePrices SalePrice[] // Can have multiple salePrice during different time period
}

model SalePrice {
  id          Int        @id @default(autoincrement())
  price       Int
  startsAt    DateTime   // Date of sales on
  endsAt      DateTime?  // Date of sales end (optional)
  priceItem   PriceItem  @relation(fields: [priceItemId], references: [id])
  priceItemId Int
}

model User {
  id            String          @id @default(cuid())
  name          String?
  gender        String?
  birth         DateTime?
  email         String          @unique
  emailVerified DateTime?
  phone         String?
  address       String?
  promotion     Boolean @default(false)
  termAndCon    Boolean @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds   String[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
